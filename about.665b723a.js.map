{"mappings":"ACCA,SAAS,EAAgB,CAAO,EAC5B,IAAM,EAAO,SAAS,cAAc,CAAC,WAG/B,EAAM,AAWhB,SAAkB,CAAG,EACjB,GAAI,AAAe,UAAf,OAAO,EAAkB,OAAO,IAGjB,CAAA,IAAf,AADJ,CAAA,EAAM,EAAI,OAAO,CAAC,IAAK,GAAvB,EACQ,MAAM,EACV,CAAA,EAAM,EAAI,KAAK,CAAC,IAAI,GAAG,CAAC,SAAU,CAAI,EAClC,OAAO,EAAO,CAClB,GAAG,IAAI,CAAC,GAAR,EAGJ,IAAM,EAAM,6CAA6C,IAAI,CAAC,GAC9D,OAAO,EAAM,CACT,EAAG,SAAS,CAAG,CAAC,EAAE,CAAE,IACpB,EAAG,SAAS,CAAG,CAAC,EAAE,CAAE,IACpB,EAAG,SAAS,CAAG,CAAC,EAAE,CAAE,GACxB,EAAI,IACR,EA3ByB,GACrB,GAAI,CAAC,EAAK,OAKV,IAAM,EAAY,AAHU,KAAR,EAAI,CAAC,CAAW,AAAQ,KAAR,EAAI,CAAC,CAAW,AAAQ,KAAR,EAAI,CAAC,CAG1B,IAAM,UAAY,UAEjD,EAAK,gBAAgB,CAAC,iBAAiB,OAAO,CAAC,AAAA,GAAM,EAAG,YAAY,CAAC,OAAQ,GACjF,CAqBA,MAAM,EAAW,IAAI,qBAAqB,AAAC,IACvC,EAAQ,OAAO,CAAC,AAAA,IACR,EAAM,cAAc,EAEpB,EAAgB,EADA,OAAO,gBAAgB,CAAC,EAAM,MAAM,EAAE,eAAe,EAG7E,EACJ,EAAG,CAAE,UAAW,EAAI,GAMpB,SAAS,EAAS,CAAG,EACjB,GAAI,CAAC,EAAG,EAAG,EAAE,CAAG,EAAI,KAAK,CAAC,QAC1B,MAAO,CAAC,CAAC,EAAG,AAAC,CAAA,UAAY,GAAK,GAAO,GAAK,EAAK,CAAC,CAAA,EAAG,QAAQ,CAAC,IAAI,KAAK,CAAC,GAAA,CAAI,AAC9E,CANA,SAAS,gBAAgB,CAAC,YAAY,OAAO,CAAC,AAAA,GAAW,EAAS,OAAO,CAAC,IAS1E,MAAM,EAAsB,UAC5B,EAAgB,GAGhB,OAAO,gBAAgB,CAAC,SAAU,WAC9B,IAAM,EAAW,SAAS,gBAAgB,CAAC,YACvC,EAAU,EAEd,EAAS,OAAO,CAAC,AAAA,IACb,IAAM,EAAO,EAAQ,qBAAqB,EACtC,CAAA,EAAK,GAAG,EAAI,GAAK,EAAK,MAAM,EAAI,GAChC,CAAA,EAAU,OAAO,gBAAgB,CAAC,GAAS,eAAe,AAAf,CAEnD,GAEA,EAAgB,EAAS,GAC7B,GAGA,OAAO,gBAAgB,CAAC,OAAQ,WAC5B,EAAgB,EACpB,GAGA,OAAO,gBAAgB,CAAC,SAAU,WAC9B,IAAM,EAAW,SAAS,gBAAgB,CAAC,YACvC,EAAU,EAEd,EAAS,OAAO,CAAC,AAAA,IACb,IAAM,EAAO,EAAQ,qBAAqB,EACtC,CAAA,EAAK,GAAG,EAAI,GAAK,EAAK,MAAM,EAAI,GAChC,CAAA,EAAU,OAAO,gBAAgB,CAAC,GAAS,eAAe,AAAf,CAEnD,GAEA,EAAgB,EAAS,GAC7B,GAGA,OAAO,gBAAgB,CAAC,YAAa,WACjC,IAAM,EAAW,SAAS,gBAAgB,CAAC,YACvC,EAAU,EAEd,EAAS,OAAO,CAAC,AAAA,IACb,IAAM,EAAO,EAAQ,qBAAqB,EACtC,CAAA,EAAK,GAAG,EAAI,GAAK,EAAK,MAAM,EAAI,GAChC,CAAA,EAAU,OAAO,gBAAgB,CAAC,GAAS,eAAe,AAAf,CAEnD,GAEA,EAAgB,EAAS,GAC7B","sources":["<anon>","logocolor.js"],"sourcesContent":["var $d172752ccfca74c1$exports = {};\nfunction $d172752ccfca74c1$var$updateLogoColor(bgColor) {\n    const logo = document.getElementById(\"logoSVG\");\n    // Convert HEX color to RGB\n    const rgb = $d172752ccfca74c1$var$hexToRgb(bgColor);\n    if (!rgb) return; // Exit if hexToRgb returned null\n    const brightness = rgb.r * 0.299 + rgb.g * 0.587 + rgb.b * 0.114; // Calculate brightness\n    // Adjust logo color based on background brightness\n    const logoColor = brightness > 128 ? \"#000000\" : \"#ec2227\"; // Light BG → Black Logo, Dark BG → White Logo\n    logo.querySelectorAll(\"polygon, path\").forEach((el)=>el.setAttribute(\"fill\", logoColor));\n}\nfunction $d172752ccfca74c1$var$hexToRgb(hex) {\n    if (typeof hex !== 'string') return null;\n    hex = hex.replace('#', '');\n    if (hex.length === 3) hex = hex.split('').map(function(char) {\n        return char + char;\n    }).join('');\n    const rgb = /^([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})$/i.exec(hex);\n    return rgb ? {\n        r: parseInt(rgb[1], 16),\n        g: parseInt(rgb[2], 16),\n        b: parseInt(rgb[3], 16)\n    } : null;\n}\n// Detect when the logo moves into a new section\nconst $d172752ccfca74c1$var$observer = new IntersectionObserver((entries)=>{\n    entries.forEach((entry)=>{\n        if (entry.isIntersecting) {\n            const bgColor = window.getComputedStyle(entry.target).backgroundColor;\n            $d172752ccfca74c1$var$updateLogoColor($d172752ccfca74c1$var$rgbToHex(bgColor)); // Convert RGB to HEX and update logo color\n        }\n    });\n}, {\n    threshold: 0.5\n});\n// Observe sections\ndocument.querySelectorAll('.section').forEach((section)=>$d172752ccfca74c1$var$observer.observe(section));\n// Function to convert RGB to HEX\nfunction $d172752ccfca74c1$var$rgbToHex(rgb) {\n    let [r, g, b] = rgb.match(/\\d+/g);\n    return `#${(16777216 | r << 16 | g << 8 | +b).toString(16).slice(1)}`;\n}\n// Initialize the logo color based on the first section\nconst $d172752ccfca74c1$var$firstSectionBgColor = \"#FF3535\"; // Initial background color\n$d172752ccfca74c1$var$updateLogoColor($d172752ccfca74c1$var$firstSectionBgColor);\n// Update logo color on scroll by checking the current section's background color\nwindow.addEventListener(\"scroll\", function() {\n    const sections = document.querySelectorAll('.section');\n    let bgColor = $d172752ccfca74c1$var$firstSectionBgColor; // Default to the first section's color\n    sections.forEach((section)=>{\n        const rect = section.getBoundingClientRect();\n        if (rect.top <= 0 && rect.bottom >= 0) bgColor = window.getComputedStyle(section).backgroundColor;\n    });\n    $d172752ccfca74c1$var$updateLogoColor($d172752ccfca74c1$var$rgbToHex(bgColor));\n});\n// Initial check on page load\nwindow.addEventListener(\"load\", function() {\n    $d172752ccfca74c1$var$updateLogoColor($d172752ccfca74c1$var$firstSectionBgColor);\n});\n// Re-check logo color on mobile device resize\nwindow.addEventListener(\"resize\", function() {\n    const sections = document.querySelectorAll('.section');\n    let bgColor = $d172752ccfca74c1$var$firstSectionBgColor; // Default to the first section's color\n    sections.forEach((section)=>{\n        const rect = section.getBoundingClientRect();\n        if (rect.top <= 0 && rect.bottom >= 0) bgColor = window.getComputedStyle(section).backgroundColor;\n    });\n    $d172752ccfca74c1$var$updateLogoColor($d172752ccfca74c1$var$rgbToHex(bgColor));\n});\n// Update logo color on mobile touch event\nwindow.addEventListener(\"touchmove\", function() {\n    const sections = document.querySelectorAll('.section');\n    let bgColor = $d172752ccfca74c1$var$firstSectionBgColor; // Default to the first section's color\n    sections.forEach((section)=>{\n        const rect = section.getBoundingClientRect();\n        if (rect.top <= 0 && rect.bottom >= 0) bgColor = window.getComputedStyle(section).backgroundColor;\n    });\n    $d172752ccfca74c1$var$updateLogoColor($d172752ccfca74c1$var$rgbToHex(bgColor));\n});\n\n\n//# sourceMappingURL=about.665b723a.js.map\n","\r\nfunction updateLogoColor(bgColor) {\r\n    const logo = document.getElementById(\"logoSVG\");\r\n\r\n    // Convert HEX color to RGB\r\n    const rgb = hexToRgb(bgColor);\r\n    if (!rgb) return; // Exit if hexToRgb returned null\r\n\r\n    const brightness = (rgb.r * 0.299 + rgb.g * 0.587 + rgb.b * 0.114); // Calculate brightness\r\n\r\n    // Adjust logo color based on background brightness\r\n    const logoColor = brightness > 128 ? \"#000000\" : \"#ec2227\"; // Light BG → Black Logo, Dark BG → White Logo\r\n\r\n    logo.querySelectorAll(\"polygon, path\").forEach(el => el.setAttribute(\"fill\", logoColor));\r\n}\r\n\r\nfunction hexToRgb(hex) {\r\n    if (typeof hex !== 'string') return null;\r\n\r\n    hex = hex.replace('#', '');\r\n    if (hex.length === 3) {\r\n        hex = hex.split('').map(function (char) {\r\n            return char + char;\r\n        }).join('');\r\n    }\r\n\r\n    const rgb = /^([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})$/i.exec(hex);\r\n    return rgb ? {\r\n        r: parseInt(rgb[1], 16),\r\n        g: parseInt(rgb[2], 16),\r\n        b: parseInt(rgb[3], 16)\r\n    } : null;\r\n}\r\n\r\n// Detect when the logo moves into a new section\r\nconst observer = new IntersectionObserver((entries) => {\r\n    entries.forEach(entry => {\r\n        if (entry.isIntersecting) {\r\n            const bgColor = window.getComputedStyle(entry.target).backgroundColor;\r\n            updateLogoColor(rgbToHex(bgColor)); // Convert RGB to HEX and update logo color\r\n        }\r\n    });\r\n}, { threshold: 0.5 });\r\n\r\n// Observe sections\r\ndocument.querySelectorAll('.section').forEach(section => observer.observe(section));\r\n\r\n// Function to convert RGB to HEX\r\nfunction rgbToHex(rgb) {\r\n    let [r, g, b] = rgb.match(/\\d+/g);\r\n    return `#${((1 << 24) | (r << 16) | (g << 8) | +b).toString(16).slice(1)}`;\r\n}\r\n\r\n// Initialize the logo color based on the first section\r\nconst firstSectionBgColor = \"#FF3535\"; // Initial background color\r\nupdateLogoColor(firstSectionBgColor);\r\n\r\n// Update logo color on scroll by checking the current section's background color\r\nwindow.addEventListener(\"scroll\", function() {\r\n    const sections = document.querySelectorAll('.section');\r\n    let bgColor = firstSectionBgColor; // Default to the first section's color\r\n\r\n    sections.forEach(section => {\r\n        const rect = section.getBoundingClientRect();\r\n        if (rect.top <= 0 && rect.bottom >= 0) {\r\n            bgColor = window.getComputedStyle(section).backgroundColor;\r\n        }\r\n    });\r\n\r\n    updateLogoColor(rgbToHex(bgColor));\r\n});\r\n\r\n// Initial check on page load\r\nwindow.addEventListener(\"load\", function() {\r\n    updateLogoColor(firstSectionBgColor);\r\n});\r\n\r\n// Re-check logo color on mobile device resize\r\nwindow.addEventListener(\"resize\", function() {\r\n    const sections = document.querySelectorAll('.section');\r\n    let bgColor = firstSectionBgColor; // Default to the first section's color\r\n\r\n    sections.forEach(section => {\r\n        const rect = section.getBoundingClientRect();\r\n        if (rect.top <= 0 && rect.bottom >= 0) {\r\n            bgColor = window.getComputedStyle(section).backgroundColor;\r\n        }\r\n    });\r\n\r\n    updateLogoColor(rgbToHex(bgColor));\r\n});\r\n\r\n// Update logo color on mobile touch event\r\nwindow.addEventListener(\"touchmove\", function() {\r\n    const sections = document.querySelectorAll('.section');\r\n    let bgColor = firstSectionBgColor; // Default to the first section's color\r\n\r\n    sections.forEach(section => {\r\n        const rect = section.getBoundingClientRect();\r\n        if (rect.top <= 0 && rect.bottom >= 0) {\r\n            bgColor = window.getComputedStyle(section).backgroundColor;\r\n        }\r\n    });\r\n\r\n    updateLogoColor(rgbToHex(bgColor));\r\n});"],"names":["$d172752ccfca74c1$var$updateLogoColor","bgColor","logo","document","getElementById","rgb","$d172752ccfca74c1$var$hexToRgb","hex","replace","length","split","map","char","join","exec","r","parseInt","g","b","logoColor","brightness","querySelectorAll","forEach","el","setAttribute","$d172752ccfca74c1$var$observer","IntersectionObserver","entries","entry","isIntersecting","$d172752ccfca74c1$var$rgbToHex","window","getComputedStyle","target","backgroundColor","threshold","match","toString","slice","section","observe","$d172752ccfca74c1$var$firstSectionBgColor","addEventListener","sections","rect","getBoundingClientRect","top","bottom"],"version":3,"file":"about.665b723a.js.map"}